declare([d, s], linear);
dotdistrib: true;
dotassoc: false;

iso(e, v):=second(partition(e, d(v))) $

notone(e):=e # 1;
matchdeclare([x, y], notone);
tellsimp(d(x^2), 2*x*d(x));
tellsimp(d(x/y), d(x)/y - x*d(y)/y^2);
tellsimp(d(lp . nn),   lp.d(nn) + nn.d(lp));
tellsimp(d(lp . lp),   2*lp.d(lp));
tellsimp(d(n(x)), dn . d(x));
tellsimp(d(s(x)), d(x));
tellsimp(d(ec*tb), d(ec)*tb + ec.d(tb));
tellsimp(d(eb*tc), d(eb)*tc + eb.d(tc));
tellsimp(d(sc*tb), d(sc)*tb + sc*d(tb));
tellsimp(d(sb*tc), d(sb)*tc + sb*d(tc));
tellsimp(d(ang*u), d(u)*ang + u.d(ang));

m: s(ang*u);
nn: n(m);

lp0: s(tb*ec + tc*eb);
area0: s(tb*sc + tc*sb);

tellsimp(d(lp), d(lp0));
tellsimp(d(area), d(area0));

H2: (lp . nn)^2/(2*area);

dH: d(H2);
dH: ratexpand(subst('nn, n(m), dH));
dH: ratexpand(subst('H,  'lp . 'nn, dH));

dH: ratexpand(area * dH);

iso(dH, u);
iso(dH, ang);
iso(dH, tb);
iso(dH, eb);
iso(dH, sc);
