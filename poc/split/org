#!/bin/sh

me=$0

${AWK=awk} -v me="$me" '
BEGIN {
    while (ARGV[++i] ~ /^-/)
	if (ARGV[i] == "-h")
	    usg()
    if (!(i in ARGV))
	err("needs old")
    old = ARGV[i++]
    if (!(i in ARGV))
	err("needs new")
    new = ARGV[i++]
    one(old)
    copy(nxt, nxt0)
    copy(flp, flp0)
    copy(ver, ver0)
    copy(tri, tri0)
    copy(edg, edg0)
    copy(hdg, hdg0)
    copy(hdg_ver, hdg_ver0)
    copy(hdg_edg, hdg_edg0)
    copy(hdg_tri, hdg_tri0)
    read(old)
    delete hdg_ver
    delete hdg_edg
    delete hdg_tri
    delete nxt
    delete ver
    delete flp
    delete edg
    delete hdg
    delete tri
    delete TRI
    delete HDG
    delete EDG
    delete VER
    one(new)
    write()
    var()
}

function read0(a, def,   i)
{
    for (i in a) {
	push_var(i)
	printf "%s = %s(%s);\n", i, def, a[i]
    }
}

function ini_ver(   v, h)
{
    v = VER["X"]
    h = hdg_ver[v]
    printf "%s = hdg_ver(%s);\n", h, v
    push_var(h)
    return h
}

function ini_tri(   t, h)
{
    t = TRI["F", "B", "D"]
    h = hdg_tri[t]
    printf "%s = hdg_tri(%s);\n", h, t
    push_var(h)
    return h
}

function read(file, h, n, nn, f)
{
    #
    # t = TRI["A", "B", "C"]
    # t = TRI["A", "D", "B"]
    # h = hdg_tri[t]
    h = ini_tri()

    VISITED[h]
    walk(h)
    print "/**/"
    read0(hdg_ver, "ver")
    read0(hdg_edg, "edg")
    read0(hdg_tri, "tri")
}

function walk(h,   n, f)
{
    if (!(h in nxt))
	return
    n = nxt[h]
    f = flp[h]
    if (!(n in VISITED)) {
	VISITED[n]
	printf "%s = nxt(%s);\n", n, h
	push_var(n)
	walk(n)
    }
    if (!(f in VISITED)) {
	VISITED[f]
	printf "%s = flp(%s);\n", f, h
	push_var(f)
	walk(f)
    }
}

function write0(x, y, def,   a, b, i)
{
    diff(x, y, a)
    diff(y, x, b)
    for (i in b) {
	if (i in a) {
	    printf "%s = %s;\n", b[i], a[i]
	    delete x[a[i]]
	} else
	    printf "%s = %s;\n", b[i], def
	push_var(b[i])
    }
}

function array(a, def,   i)
{
    for (i in a)
	printf "%s(%s, %s);\n", def, a[i], i
}

function write(  d)
{
    write0(hdg_ver0, hdg_ver, "nv++")
    write0(hdg_edg0, hdg_edg, "ne++")
    write0(hdg_tri0, hdg_tri, "nt++")
    write0(ver0, ver, "nh++")
    #diff(hdg_ver0, hdg_ver, d)
    diff(hdg_edg0, hdg_edg, d)
    for (i in d)
	msg(d[i])
    array(nxt, "s_nxt")
    array(flp, "s_flp")
    array(ver, "s_ver")
    array(tri, "s_tri")
    array(edg, "s_edg")
    array(hdg_ver, "s_hdg_ver")
    array(hdg_edg, "s_hdg_edg")
    array(hdg_tri, "s_hdg_tri")
}

function one(file)
{
    while (getline < file > 0) {
	set_nxt($1, $2, $3)
	set_nxt($2, $3, $1)
	set_nxt($3, $1, $2)

	set_flp($1, $2)
	set_flp($2, $3)
	set_flp($3, $1)

	set_ver($1, $2)
	set_ver($2, $3)
	set_ver($3, $1)

	set_tri($1, $2, $3)
	set_tri($2, $3, $1)
	set_tri($3, $1, $2)

	set_edg($1, $2)
	set_edg($2, $3)
	set_edg($3, $1)
    }
    close(file)
}

function set_edg(i, j,  e, h)
{
    e = id_edg(i, j)
    h = id_hdg(i, j)
    SET(edg, h, e)
    SET(hdg_edg, e, h)
}

function set_ver(i, j,  h, v)
{
    h = id_hdg(i, j)
    v = id_ver(i)
    SET(ver, h, v)
    SET(hdg_ver, v, h)
}

function set_nxt(i, j, k,  h, n)
{
    h = id_hdg(i, j)
    n = id_hdg(j, k)
    SET(nxt, h, n)
}

function set_tri(i, j, k,  h, t)
{
    h = id_hdg(i, j)
    t = id_tri(i, j, k)
    SET(tri, h, t)
    SET(hdg_tri, t, h)
}

function set_flp(i, j,   h, f)
{
    h = id_hdg(i, j)
    f = id_hdg(j, i)
    SET(flp, h, f)
    SET(flp, f, h)
}

function reg(i, j)
{
    h = id_hdg(i, j)
    f = id_hdg(j, i)
}

function id_hdg(i, j)
{
    if ((i, j) in HDG)
	return HDG[i, j]
    else
	return HDG[i, j] = new_hdg(i, j)
}

function new_hdg(i, j)
{
    return "h" i j
}

function id_ver(i)
{
    if (i in VER)
	return VER[i]
    else
	return VER[i] = new_ver(i)
}

function new_ver(i)
{
    return i
}

function id_tri(i, j, k)
{
    if ((i, j, k) in TRI)
	return TRI[i, j, k]
    else
	return TRI[i, j, k] = TRI[k, i, j] = TRI[j, k, i] = new_tri(i, j, k)
}

function new_tri(i, j, k, t)
{
    if (i > j) {
	t = i; i = j; j = t
    }
    if (j > k) {
	t = j; j = k; k = t
    }
    return i j k
}

function id_edg(i, j)
{
    if ((i, j) in EDG)
	return EDG[i, j]
    else
	return EDG[i, j] = EDG[j, i] = new_edg(i, j)
}

function new_edg(i, j,   t)
{
    if (i > j) {
	t = i
	i = j
	j = t
    }
    return "e" i j
}

function SET(map, key, val)
{
    if (!(key in map))
	map[key] = val
}

function err(a, b, c, d, e)
{
    msg(a, b, c, d, e)
    exit(2)
}

function msg(a, b, c, d, e,   s)
{
    s = sprintf(a, b, c, d, e)
    printf "%s: %s\n", me, s | "cat >&2"
}

function copy(a, b,   i)
{
    for (i in a)
	b[i] = a[i]
}

function usg()
{
    printf "%s old new\n", me | "cat >&2"
    exit(2)
}

function diff(a, b, c,   d, x, i)
{
    delete c
    copy(a, d)
    for (x in b)
	delete d[x]
    for (x in d)
	c[++i] = x
}

function push_var(var,   i)
{
    for (i = 0; i in VAR; i++) ;
    VAR[i] = var
}

function var(   i) {
    for (i = 0; i in VAR; i++)
	printf "int %s;\n", VAR[i] | "sort"
    close("sort")
}

' "$@"
