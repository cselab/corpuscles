#!/bin/sh

awk '
BEGIN {
    one(ARGV[1])
    read(ARGV[1])
    one(ARGV[2])
    # write(ARGV[2])
}

function read(file, t, h, n, nn, f)
{
    t = TRI["F", "B", "D"]
    h = hdg_tri[t]
    printf "%s = hdg_tri(%s);\n", h, t

    walk(h)
    for (v in hdg_ver) {    
	h = hdg_ver[v]
	printf "%s = ver(%s);\n", v, h
    }

    for (e in hdg_edg) {
	h = hdg_edg[e]
	printf "%s = edg(%s);\n", e, h
    }    
}

function walk(h,   n, f)
{
    if (!(h in nxt))
	return
    n = nxt[h]
    f = flp[h]
    if (!(n in VISITED)) {
	VISITED[n]
	printf "%s = nxt(%s);\n", n, h
	walk(n)
    }
    if (!(f in VISITED)) {
	VISITED[f]
	printf "%s = flp(%s);\n", f, h
	walk(f)
    }
}

function write(file,    i, j, k)
{
    while (getline < file > 0) {
	i = $1; j = $2; k =$3
	print TRI[i, j, k]
    }
    close(file)
}

function one(file)
{
    while (getline < file > 0) {
	set_nxt($1, $2, $3)
	set_nxt($2, $3, $1)
	set_nxt($3, $1, $2)

	set_flp($1, $2)
	set_flp($2, $3)
	set_flp($3, $1)

	set_ver($1, $2)
	set_ver($2, $3)
	set_ver($3, $1)

	set_tri($1, $2, $3)
	set_tri($2, $3, $1)
	set_tri($3, $1, $2)

	set_edg($1, $2)
	set_edg($2, $3)
	set_edg($3, $1)
    }
    close(file)
}

function set_edg(i, j,  e, h)
{
    e = id_edg(i, j)
    h = id_hdg(i, j)
    SET(edg, h, e)
    SET(hdg_edg, e, h)
}

function set_ver(i, j,  h, v)
{
    h = id_hdg(i, j)
    v = id_ver(i)
    SET(ver, h, v)
    SET(hdg_ver, v, h)
}

function set_nxt(i, j, k,  h, n)
{
    h = id_hdg(i, j)
    n = id_hdg(j, k)
    SET(nxt, h, n)
}

function set_tri(i, j, k,  h, t)
{
    h = id_hdg(i, j)
    t = id_tri(i, j, k)
    SET(tri, h, t)
    SET(hdg_tri, t, h)
}

function set_flp(i, j,   h, f)
{
    h = id_hdg(i, j)
    f = id_hdg(j, i)
    SET(flp, h, f)
    SET(flp, f, h)
}

function reg(i, j)
{
    h = id_hdg(i, j)
    f = id_hdg(j, i)
}

function id_hdg(i, j)
{
    if ((i, j) in HDG)
        return HDG[i, j]
    else
        return HDG[i, j] = new_hdg(i, j)
}

function new_hdg(i, j, h)
{
    h = H++
    return "h" sprintf("%02d", h)
}

function id_ver(i)
{
    if (i in VER)
        return VER[i]
    else
        return VER[i] = new_ver(i)
}

function new_ver(i)
{
    return i
}

function id_tri(i, j, k)
{
    if ((i, j, k) in TRI)
        return TRI[i, j, k]
    else
        return TRI[i, j, k] = TRI[k, i, j] = TRI[j, k, i] = new_tri(i, j, k)
}

function new_tri(i, j, k,   t)
{
    t = T++
    return "t" sprintf("%02d", t)
}

function id_edg(i, j)
{
    if ((i, j) in EDG)
        return EDG[i, j]
    else
        return EDG[i, j] = EDG[j, i] = new_edg(i, j)
}

function new_edg(i, j,   e)
{
    e = E++
    return "e" sprintf("%02d", e)
}

function SET(map, key, val)
{
    if (!(key in map))
        map[key] = val
}

function err(a, b, c, d, e)
{
    printf a, b, c, d, e | "cat >&2"
    exit(2)
}

' "$@"
