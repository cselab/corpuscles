load("nchrpl")$
load("scifac")$
load("format")$
load("cgrind")$
load("stringproc") $

cgrind0(e)::=buildq([e: e, s: gensym()],
  block(
    [s],
    s: make_string_output_stream(),
    with_stdout(s, cgrind(e)),
    s: get_output_stream_string(s),
    s: regex_subst_first("", ";\\n$", s),
    s));

%var%: [] $
cg(v)::=buildq([v: v], (
    push('v, %var%),
    printf(true, "~a = ~a;~%", 'v, cgrind0(v)))) $
cgr(v)::=buildq([v: v],
    printf(true, "SET(~a, ~a);~%", 'v, cgrind0(v)));

frm0 (e):= format(e, %poly(Fb, Fa), %factor, gcfac) $
frm1 (e):= format(e, %poly(ux, uy, wx, wy), %factor, gcfac) $

co(dE, d):=frm0(factor(coeff(dE, diff(d))))         $

declare([bx, cx, cy], constant) $
ax: ay: by: 0;

dx(x, y):= p0 + px*x + py*y$
dy(x, y):= q0 + qx*x + qy*y$

e: [
  dx(ax, ay) = vx,
  dy(ax, ay) = vy,

  dx(bx, by) = bx + ux,
  dy(bx, by) = by + uy,

  dx(cx, cy) = cx + wx,
  dy(cx, cy) = cy + wy
] $

de: diff(e);
v: [p0, px, py,   q0, qx, qy];
ds: linsolve(de, diff(v));
s : linsolve( e,       v);
Q: by*cx-bx*cy;

ds: subst('Q, Q, ds);
s:  subst('Q, Q, s);

M: matrix([px, py], [qx, qy])$
D: M . transpose(M);

I1: mattrace(D);
I2: determinant(D);
I2: factor(I2);

E: F(I1, I2);
gradef(F(a, b), Fa, Fb) $

dE: subst(ds, factor(diff(E))) $
dE: ratsubst('F,   F(I1, I2), dE) $
dE: expand(dE) $

back(e):=(
  e: subst(0, 'vx, e),
  e: subst(0, 'vy, e),
  e: subst(0, 'uy, e),
  e);

dvx: gcfac(back(co(dE, vx)));
dvy: gcfac(back(co(dE, vy)));

dux: gcfac(back(co(dE, ux)));
duy: gcfac(back(co(dE, uy)));

dwx: gcfac(back(co(dE, wx)));
dwy: gcfac(back(co(dE, wy)));

px: gcfac(back(frm1(assoc('px, s))));
py: gcfac(back(frm1(assoc('py, s))));

qx: gcfac(back(frm1(assoc('qx, s))));
qy: gcfac(back(frm1(assoc('qy, s))));

matchdeclare(x, all) $
defrule(r_sq, x^2, sq(x)) $
rsq(e):=apply1(e, r_sq) $
I1: rsq(factor(I1));

Fa: F1(param, 'I1, 'I2) $
Fb: F2(param, 'I1, 'I2) $

pI1: 'I1 $
pI2: 'I2 $
pA : 'Q/2;

with_stdout("body",
  cg(Q),
  printf(true, "NOT_ZERO(Q);~%"),
  cg(px), cg(py), cg(qx), cg(qy),
  cg(I1), cg(I2),
  cg(Fa), cg(Fb),
  newline(),
  cgr(dvx), cgr(dvy), cgr(dux), cgr(duy), cgr(dwx), cgr(dwy),
  cgr(pI1), cgr(pI2), cgr(pA)) $

%var%: reverse(%var%)$
with_stdout("var",
  for e in %var% do printf(true, "~a~%", e));

pfun(e)::=printf(true, "real (*~a)(void*, real, real)~%", e);
real(e)::=printf(true, "~a ~a~%",   'real, e);
preal(e)::=printf(true, "~a *~a~%",  'real, e);
pvoid(e)::=printf(true, "~a *~a~%", 'void, e);
with_stdout("param",
  pvoid(param),
  pfun(F1), pfun(F2),
  real(bx), real(cx), real(cy),
  real(ux), real(wx), real(wy),
  preal(dvx), preal(dvy),
  preal(dux), preal(duy),
  preal(dwx), preal(dwy),
  preal(pI1), preal(pI2), preal(pA));
