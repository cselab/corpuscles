load("stringproc")$
load ("nchrpl") $ /* mattrace */

load("he/err.mac")$
load("he/off.mac")$
load("he/util.mac")$
load("he/he.mac")$
load("he/util.mac")$
load("he/loop.mac")$
load("he/vec.mac")$
load("he/tri.mac")$
load("he/dtri.mac")$
load("he/edg.mac")$
load("he/punto.mac")$
load("he/dvec.mac")$
load("he/ten.mac")$

file: "~/he/data/rbc/laplace/0.off" $
he: he(file) $

nh: he_nh(he) $
nv: he_nv(he) $

alloc(nh,   u, ang) $

alloc(nv,   n, dn)  $
valloc(nv, m)$
talloc(nv, f)$

loop_he(he,
  u[h]:   tri_normal(a, b, c),
  ang[h]: tri_angle(c, a, b))$

loop_he(he,
  m[i] += ang[h]*u[h])$

loop_ver(he,
  dn[i]: dvec_norm(m[i]),
  n[i]: vec_norm(m[i]))$

loop_he(he,
  [Da, Db, Dc]: dtri_normal(a, b, c),
  f[i] += ang[h]*ten_mult(dn[i], Da),
  f[j] += ang[h]*ten_mult(dn[i], Db),
  f[k] += ang[h]*ten_mult(dn[i], Dc))$

loop_he(he,
  [dc, da, db]: dtri_angle(c, a, b),
  f[i] += ten_dyadic(ten_vec(dn[i], u[h]), da),
  f[j] += ten_dyadic(ten_vec(dn[i], u[h]), db),
  f[k] += ten_dyadic(ten_vec(dn[i], u[h]), dc));

/* output */
alloc(nv, r, nr, det, tr)$
loop_ver(he,
  r[i]:  vec_cylindrical_r(a),
  nr[i]: vec_cylindrical_r(n[i]),
  det[i]: determinant(f[i]),
  tr[i]: mattrace(f[i]))$

with_stdout("normal",
  printf(true,
    "x y z r nx ny nz nr xx xy xz yx yy yz zx zy zz determinant trace~%"),
  punto_write(he, r, n, nr, f, det, tr))$
