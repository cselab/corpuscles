load("stringproc")$
load ("nchrpl") $ /* mattrace */

load("he/err.mac")$
load("he/off.mac")$
load("he/util.mac")$
load("he/he.mac")$
load("he/util.mac")$
load("he/loop.mac")$
load("he/vec.mac")$
load("he/tri.mac")$
load("he/dtri.mac")$
load("he/edg.mac")$
load("he/punto.mac")$
load("he/dvec.mac")$
load("he/ten.mac")$

file: "~/he/data/sph/laplace/1.off"$
he: he(file) $

nh: he_nh(he) $
nv: he_nv(he) $

alloc(nh,   u, ang) $
alloc(nv,   n, dn)  $
valloc(nv, m)$
talloc(nv, f)$

loop_he(he,
  u[h]:   tri_normal(a, b, c),
  ang[h]: tri_angle(a, b, c));

loop_he(he,
  m[i] += ang[h]*u[h]);

loop_ver(he,
  dn[i]: dvec_norm(m[i]),
  n[i]: vec_norm(m[i]));

loop_he(he,
  dF: dn[i],
  da: dtri_normal(c, a, b),
  db: dtri_normal(a, b, c),
  dc: dtri_normal(b, c, a),
  f[i] += ang[h] * ten_mult(dF, da),
  f[j] += ang[h] * ten_mult(dF, db),
  f[k] += ang[h] * ten_mult(dF, dc));

loop_he(he,
  dF: dn[i],
  [da, db, dc]: dtri_angle(a, b, c),
  f[i] += ten_mult(dF, ten_dyadic(da, u[h])),
  f[j] += ten_mult(dF, ten_dyadic(db, u[h])),
  f[k] += ten_mult(dF, ten_dyadic(dc, u[h])));

/* output */
alloc(nv, r, nr, det)$
loop_ver(he,
  r[i]:  vec_cylindrical_r(a),
  nr[i]: vec_cylindrical_r(n[i]),
  det[i]: determinant(f[i]));
with_stdout("normal",
  printf(true,
    "x y z r nx ny nz nr fxx fxy fxz fyx fyy fyz fzx fzy fzz det~%"),
  punto_write(he, r, n, nr, f, det));
