load("stringproc")$

load("he/off.mac")$
load("he/util.mac")$
load("he/he.mac")$
load("he/util.mac")$
load("he/loop.mac")$
load("he/vec.mac")$
load("he/tri.mac")$
load("he/ten.mac")$
load("he/dtri.mac")$
load("he/edg.mac")$
load("he/punto.mac")$
load("he/dvec.mac")$

if not stringp(o) then o: "q";
if not stringp(i) then i: "data/q.off";

P: 'H;
define(Q(H), diff(P, 'H));

dy(a, b):=ten_dyadic(a, b);
vt(a, b):=vec_ten(a, b);
tv(a, b):=ten_vec(a, b);
tt(a, b):=ten_ten(a, b);
vv(a, b):=vec_dot(a, b);

he: he(i) $

nh: he_nh(he) $
nv: he_nv(he) $

alloc(nh,   tb, tc, eb, ec, sb, sc, u, ang) $
alloc(nv, H, ff, r);
calloc(nv, area);
valloc(nv, lp, m, n);
valloc(nv, f);
talloc(nv, ldn)$

loop_he(he,
  tb[h]: tri_cot(a, b, c),
  tc[h]: tri_cot(b, c, a),

  eb[h]: a - b,
  ec[h]: a - c,

  sb[h]: edg_sq(a, b),
  sc[h]: edg_sq(a, c),

  u[h]:   tri_normal(a, b, c),
  ang[h]: tri_angle(c, a, b));

loop_he(he,
  [ang: ang[h], u: u[h]],
  m[i]    += ang*u);

loop_ver(he,
  n[i]: vec_norm(m[i]));

loop_he(he,
  lp[i]   += tb[h]*ec[h] + tc[h]*eb[h],
  area[i] += tb[h]*sc[h] + tc[h]*sb[h]);

loop_ver(he,
  [m: m[i], lp: lp[i]],
  dn: dvec_norm(m),
  ldn[i]: vt(lp, dn));

loop_ver(he,
  [n: n[i], lp: lp[i]],
  H[i]: vec_dot(lp, n),
  r[i]: vec_cylindrical_r(a));

loop_he(he,
  [ang: ang[h], ldn: ldn[i], H: H[i], C],
  [Da, Db, Dc]: dtri_normal(a, b, c),
  C: Q(H)*ang,
  f[i] += C*vt(ldn, Da),
  f[j] += C*vt(ldn, Db),
  f[k] += C*vt(ldn, Dc));
loop_he(he,
  [ldn: ldn[i], u: u[h], H: H[i], C],
  [dc, da, db]: dtri_angle(c, a, b),
  C: Q(H)*vv(ldn, u),
  f[i] += C*da,
  f[j] += C*db,
  f[k] += C*dc);
loop_he(he,
  [n: n[i], ec: ec[h], H: H[i], C],
  [da, db, dc]: dtri_cot(a, b, c),
  C: Q(H)*vv(n, ec),
  f[i] += C*da,
  f[j] += C*db,
  f[k] += C*dc);
loop_he(he,
  [n: n[i], eb: eb[h], H: H[i], C],
  [db, dc, da]: dtri_cot(b, c, a),
  C: Q(H)*vv(n, eb),
  f[i] += C*da,
  f[j] += C*db,
  f[k] += C*dc);
loop_he(he,
  [tc: tc[h], tb: tb[h], n: n[i], H: H[i]],
  f[i] += Q(H)*(tc + tb)*n,
  f[j] -= Q(H)*tc*n,
  f[k] -= Q(H)*tb*n);

loop_ver(he,
  ff[i]: vec_abs(f[i]));
with_stdout(o,
  printf(true, "x y z r area H fx fy fz ff~%"),
  punto_write(he, r, area, H, f, ff));

print(ff[0]/area[0]);
