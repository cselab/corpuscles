tri_edg(a, b, c):=block([ab, bc, ca],
  ab: b - a,
  bc: c - b,
  ca: a - c,
  [ab, bc, ca]);

tri_area(a, b, c):=block([u, v, n],
  u: b - a,
  v: c - a,
  n: vec_cross(u, v),
  vec_abs(n)/2);

tri_volume(a, b, c):=block([n],
  n: vec_cross(a, b),
  vec_dot(c, n)/6);

tri_normal(a, b, c):=block([u, v, n],
  u: b - a,
  v: c - a,
  n: vec_cross(u, v),
  vec_norm(n));

tri_angle(a, b, c):=block([u, v],
  u:  a - b,
  v:  c - b,
  abs(vec_angle(u, v)));

tri_cot(a, b, c):=block([x, y, u, v],
  y: 2 * tri_area(a, b, c),
  u: a - b,
  v: c - b,
  x: vec_dot(u, v),
  x/y);

tri_3to2(a, b, c):=block([ab, ac, ux, wx, wy],
  ab: b - a,
  ac: c - a,
  ux: vec_abs(ab),
  wx: vec_project_scalar(ac, ab),
  wy: vec_reject_scalar(ac, ab),
  [ux, wx, wy]);

tri_2to3(a, b, c):=block([u, v, nx, n, ey, ny],
  u: b - a,
  v: c - a,
  nx: vec_norm(u),
  n: vec_cross(u, v),
  ey: vec_cross(n, u),
  ny: vec_norm(ey),
  [nx, ny]);

tri_2d_invariants(bx, cx, cy, ux, wx, wy):=block([px, py, qy, al, be],
  px: ux/bx,
  py: -(cx*ux-bx*wx)/(bx*cy),
  qy: wy/cy,
  al: px*qy - 1,
  be: (qy^2-2*px*qy+py^2+px^2)/(2*px*qy),
  [al, be]);

tri_3d_invariants(a, b, c, u, v, w):=block([i, jx, jy, x, yx, yy],
  [i, jx, jy]: tri_3to2(a, b, c),
  [x, yx, yy]: tri_3to2(u, v, w),
  tri_2d_invariants(i, jx, jy, x, yx, yy));

tri_edg_area(a, b, c):=block([A, e],
  e: edg_sq(a, b),
  A: tri_area(a, b, c),
  e/A);

tri_alpha(a, b, c, u, v, w):=block([A, B],
  A: tri_area(a, b, c),
  B : tri_area(u, v, w),
  B/A - 1);

%be(b, c, v, w):=-(2*sqrt(b*c-4)*sqrt(v*w-4)-b*w-c*v+8)/8;

tri_beta(a, b0, c0, u, v0, w0):=block([b, c, v, w],
  b: tri_edg_area(a, b0, c0),
  c: tri_edg_area(a, c0, b0),

  v: tri_edg_area(u, v0, w0),
  w: tri_edg_area(u, w0, v0),
  %be(b, c, v, w));

tri_lim_area(Ka, a3, a4, a, b, c, u, v, w):=block([al],
  al:  tri_alpha(a, b, c, u, v, w),
  (Ka*(a4*al^4+a3*al^3+al^2))/2);

tri_lim_shear(mu, b1, b2, a, b, c, u, v, w):=block([al, be],
  al:  tri_alpha(a, b, c, u, v, w),
  be:  tri_beta(a, b, c, u, v, w),
  mu*(be + b1*al*be + b2*be*be));

tri_lim(Ka, a3, a4, mu, b1, b2, a, b, c, u, v, w):=
tri_lim_area(Ka, a3, a4, a, b, c, u, v, w)+ tri_lim_shear(mu, b1, b2, a, b, c, u, v, w);

tri_abc(a, b, c, u, v, w):=block([l0, lp0, p0, l, lp, p],
   l0: edg_abs(a, b),
   lp0: edg_abs(a, c),
   p0: tri_angle(c, a, b),

   l: edg_abs(u, v),
   lp: edg_abs(u, w),
   p: tri_angle(w, u, v),

   [l/l0, 1/sin(p0)*(lp/lp0*cos(p) - l/l0*cos(p0)), lp/lp0*sin(p)/sin(p0)]);

tri_moment(a, b, c):=block([x, y, z, u, v, w, p, q, r, xx, xy, xz, yy, yz, zz],
  [x, y, z]: a,
  [u, v, w]: b,
  [p, q, r]: c,
  xx: (x^2+(u+p)*x+u^2+p*u+p^2)/12,
  yy: (y^2+(v+q)*y+v^2+q*v+q^2)/12,
  zz: (z^2+(w+r)*z+w^2+r*w+r^2)/12,
  xy: ((2*x+u+p)*y+(v+q)*x+(2*u+p)*v+q*u+2*p*q)/24,
  xz: ((2*x+u+p)*z+(w+r)*x+(2*u+p)*w+r*u+2*p*r)/24,
  yz: ((2*y+v+q)*z+(w+r)*y+(2*v+q)*w+r*v+2*q*r)/24,
  [xx, xy, xz, yy, yz, zz]);
