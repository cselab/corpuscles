vec_ini(a)::=buildq([a,
    x:  concat(a, 'x),
    y:  concat(a, 'y),
    z:  concat(a, 'z)],
  a: [x, y, z]);

vec_any(a)::=buildq([a, lo: gensym(), hi: gensym(), L: gensym()],
  block([lo: -9, hi: 9, L],
    L: hi - lo + 1,
    a: [lo + random(L), lo + random(L), lo + random(L)]));

vec_dot(a, b):= block([X: 1, Y: 2, Z: 3],
  a[X]*b[X] + a[Y]*b[Y] + a[Z]*b[Z]);

vec_cross(a, b):= block([X: 1, Y: 2, Z: 3],
  [a[Y]*b[Z]-b[Y]*a[Z],
   b[X]*a[Z]-a[X]*b[Z],
   a[X]*b[Y]-b[X]*a[Y]]);

vec_ten(a, t):=ten_block(
  [t[X,X]*a[X] + t[Y,X]*a[Y] + t[Z,X]*a[Z],
   t[X,Y]*a[X] + t[Y,Y]*a[Y] + t[Z,Y]*a[Z],
   t[X,Z]*a[X] + t[Y,Z]*a[Y] + t[Z,Z]*a[Z]]);

vec_abs(a):=sqrt(vec_dot(a, a));
vec_cylindrical_r(a):=block([X: 1, Y: 2],
  sqrt(a[X]*a[X] + a[Y]*a[Y]));

vec_norm(a):=a/vec_abs(a);

vec_project(a, b):=block([n, s],
  n: vec_norm(b),
  s: vec_dot(a, n),
  s * n);

vec_project_scalar(a, b):=block([n],
  n: vec_norm(b),
  vec_dot(a, n));

vec_reject_scalar(a, b):=block([p, s2, q],
  p: vec_project_scalar(a, b),
  s2: vec_dot(a, a),
  q: s2 - p*p,
  sqrt(q));

vec_reject(a, b):=block([p],
  p: vec_project(a, b),
  a - p);

vec_angle(a, b):=block([n, x, y, ang],
  n: vec_cross(a, b),
  y: vec_abs(n),
  x: vec_dot(a, b),
  atan2(y, x));

vec_arg([L]):=printf(true, "~{~f ~}~%", flatten(L));
