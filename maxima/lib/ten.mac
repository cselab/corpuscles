ten_any(a)::=buildq([a, lo: gensym(), hi: gensym(), L: gensym()],
  block([lo: -9, hi: 9, L],
    L: hi - lo + 1,
    a: matrix(
      [lo + random(L), lo + random(L), lo + random(L)],
      [lo + random(L), lo + random(L), lo + random(L)],
      [lo + random(L), lo + random(L), lo + random(L)])));

ten_ini(a)::=buildq([a, m: gensym()],
  a: matrixmap(
    lambda([i], arraymake(a, [i])),
    matrix(['XX, 'XY, 'XZ], ['YX, 'YY, 'YZ], ['ZX, 'ZY, 'ZZ])));

ten_block([L])::=buildq([L], block(
    [X:1, Y:2, Z:3],
    splice(L)));

ten_dyadic(a, b):=ten_block(matrix(
    [a[X]*b[X], a[X]*b[Y], a[X]*b[Z]],
    [a[Y]*b[X], a[Y]*b[Y], a[Y]*b[Z]],
    [a[Z]*b[X], a[Z]*b[Y], a[Z]*b[Z]]));

ten_mult(a, b):= a . b;

ten_vec(t, a):=ten_block(
  [t[X,X]*a[X] + t[X,Y]*a[Y] + t[X,Z]*a[Z],
   t[Y,X]*a[X] + t[Y,Y]*a[Y] + t[Y,Z]*a[Z],
   t[Z,X]*a[X] + t[Z,Y]*a[Y] + t[Z,Z]*a[Z]]);

ten_one():=ident(3);
ten_zero():=zeromatrix(3, 3);

ten_arg([L]):=printf(true, "~{~g~}~%", flatten(args(L)));
