#!/bin/sh

. co.util
prog=co.tile
: ${FFPROBE=ffprobe}
: ${FFMPEG=ffmpeg}

usg () {
    msg "$prog -o OUTPUT.mp4 -nx int -ny int [files.mp4 row major order]"
    msg "tile video files"
    msg "-nx|-ny tiling dimensions"
    exit
}
filep() { if test ! -f "$1"; then err "not a file '$1'"; fi; }
intp()  { echo "$1" | grep -q '^[0-9][0-9]*$'; }
mult()  { awk -v x="$1" -v y="$2" 'BEGIN {print x * y}'; }

rate () {
    "$FFPROBE" 2>/dev/null -v 0 -of csv=p=0 -select_streams v:0 -show_entries stream=r_frame_rate "$1"
}

height () {
    "$FFPROBE" 2>/dev/null -v 0 -select_streams v:0 -show_entries stream=height -of default=nw=1:nk=1 "$1"
}

width () {
    "$FFPROBE" 2>/dev/null -v 0 -select_streams v:0 -show_entries stream=width -of default=nw=1:nk=1 "$1"
}

if test $# -ne 0 && test "$1" = -h; then usg; fi

if ! e $FFMPEG -version '>/dev/null' '2>/dev/null'
then err "$FFMPEG command not found"
fi

if ! e $FFPROBE -version '>/dev/null' '2>/dev/null'
then err "$FFPROBE command not found"
fi

x=1600 nx= ny= Output=
while test $# -ne 0
do case "$1" in
       -o) shift
           if test $# -eq 0; then err '-o needs a file'; fi
           Output="$1"; shift
           ;;
       -nx) shift
           if test $# -eq 0; then err '-nx needs an argument'; fi
           nx="$1"; shift
           if ! intp "$nx"; then err "not an integer '$nx'"; fi
           ;;
       -ny) shift
           if test $# -eq 0; then err '-ny needs an argument'; fi
           ny="$1"; shift
           if ! intp "$ny"; then err "not an integer '$ny'"; fi
           ;;       
       -*) err "unknown option '$1'" ;;
       *) break ;;
   esac
done

if test x"$nx" = x; then err "-nx should be given"; fi
if test x"$ny" = x; then err "-ny should be given"; fi
if test x"$Output" = x; then err "-o should be given"; fi

n=`mult $nx $ny`
if test $# -ne $n
then err "wrong number of files "$#" should be $nx x $ny = $n"
fi

for i
do if ! test -f "$i"
   then err "not a file '$i'"
   fi
done

if ! r=`rate "$1"`
then err "ffprobe failed on '$1'"
fi

if ! x0=`width "$1"`
then err "ffprobe failed on '$1'"
fi

if ! y0=`height "$1"`
then err "ffprobe failed on '$1'"
fi

if ! c=`co.tile0 "$r" "$x0" "$y0" "$nx" "$ny" "$@" "$Output"`
then err "co.tile0 failed"
fi
eval "$c"
