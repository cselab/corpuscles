. co.util

prog=co.run

: ${VALGRIND=valgrind}
: ${TIME=time}
: ${GDB_EXEC=gdb}
: ${CO_ARG=}
: ${BSUB=bsub}
: ${NT=1}

usg () {
    msg "$prog 'prog' [args ...]"
    msg 'environment variable CO_ARG is  used as an argument to bsub'
    msg 'NT is used as openmp number of threads'
    msg 'CO_HOST if set is used as a host nickname'
    exit
}

quote () { printf %s\\n "$1" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/'/" ; }

gdb0() {
    e "$GDB_EXEC" "$GDB" "$@"
}

host="`co.host`"
if test $? -ne 0; then err 'co.host failed'; fi

if test $# -ne 0 && test "$1" = -h; then usg; fi
if test $# -eq 0
then err "'prog' is missing"; fi

e export OMP_NUM_THREADS=$NT
for i do shift; set -- "$@" "`quote "$i"`"; done

if test ! -z "${VAL+x}"
then
    e "$VALGRIND" "$VAL" "$@"
elif test ! -z "${TIM+x}"
then
    e "$TIME" "$TIM" "$@"
elif test ! -z "${GDB+x}"
then
    gdb0 "$@"
else
    case "$host" in
        euler)
            if ! "$BSUB" -V 2>/dev/null; then err "$BSUB is not found"; fi
            e $BSUB -n $NT $CO_ARG "$@"
            ;;
        falcon)
            e module load gsl
            if test $? -ne 0; then err 'fail to load module gsl'; fi
            e "$@"
            ;;
        *) e "$@"
    esac 
fi
